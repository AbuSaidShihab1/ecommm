        <div  className='mb-[10px] mt-[10px]'>
                <label htmlFor="name"className='text-neutral-600'>Authorized</label><br />
<div ref={dropdownRef} className="relative w-full mt-[5px]">
      {/* Dropdown Button */}
      <div
        onClick={() => setIsOpen(!isOpen)}
        className="flex items-center justify-between bg-white border border-[#eee] rounded-[5px] px-4 py-2 cursor-pointer hover:border-brand_color"
      >
        <div className="flex items-center gap-2">
          <span
            className={`w-3 h-3 rounded-full ${selectedOptionData?.bgColor}`}
          ></span>
          <span className={`font-medium ${selectedOptionData?.color}`}>
            {selectedOption}
          </span>
        </div>
        <svg
          className={`w-5 h-5 text-gray-500 transition-transform ${
            isOpen ? 'rotate-180' : ''
          }`}
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth={2}
            d="M19 9l-7 7-7-7"
          />
        </svg>
      </div>

      {/* Dropdown Menu */}
      {isOpen && (
        <ul className="absolute mt-1 w-full bg-white border border-gray-200 rounded-lg shadow-lg z-50 max-h-60 overflow-auto">

          {options.map((option) => (
            <li
              key={option.label}
              onClick={() => handleSelect3(option)}
              className={`px-4 py-2 flex items-center gap-2 cursor-pointer mt-[5px] 
                ${selectedOption === option.label ? `${option.bgColor} text-white` : `${option.color}`}
                hover:${option.bgColor} hover:text-white hover:bg-orange-400`}
            >
              <span
                className={`w-3 h-3 rounded-full ${
                  selectedOption === option.label
                    ? 'bg-white'
                    : option.bgColor
                }`}
              ></span>
              {option.label}
            </li>
          ))}
        </ul>
      )}
    </div>
              </div>
             
           <div  className='mb-[10px]'>
                <label htmlFor="name"className='text-neutral-600'>Status</label><br />
<div ref={dropdownRef3} className="relative w-full mt-[5px]">
      {/* Dropdown Button */}
      <div
        onClick={() => setIsOpen3(!isOpen3)}
        className="flex items-center justify-between bg-white border border-[#eee] rounded-[5px] px-4 py-2 cursor-pointer hover:border-brand_color"
      >
        <div className="flex items-center gap-2">
          <span
            className={`w-3 h-3 rounded-full ${selectedOptionData3?.bgColor}`}
          ></span>
          <span className={`font-medium ${selectedOptionData3?.color}`}>
            {selectedOption3}
          </span>
        </div>
        <svg
          className={`w-5 h-5 text-gray-500 transition-transform ${
            isOpen3 ? 'rotate-180' : ''
          }`}
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth={2}
            d="M19 9l-7 7-7-7"
          />
        </svg>
      </div>

      {/* Dropdown Menu */}
      {isOpen3 && (
        <ul className="absolute mt-1 w-full bg-white border border-gray-200 rounded-lg shadow-lg z-50 max-h-60 overflow-auto">

          {options3.map((option) => (
            <li
              key={option.label}
              onClick={() => handleSelect4(option)}
              className={`px-4 py-2 flex items-center gap-2 cursor-pointer mt-[5px] 
                ${selectedOption3 === option.label ? `${option.bgColor} text-white` : `${option.color}`}
                hover:${option.bgColor} hover:text-white hover:bg-orange-400`}
            >
              <span
                className={`w-3 h-3 rounded-full ${
                  selectedOption3 === option.label
                    ? 'bg-white'
                    : option.bgColor
                }`}
              ></span>
              {option.label}
            </li>
          ))}
        </ul>
      )}
    </div>
              </div>

                       <div  className='mb-[10px]'>
                <label htmlFor="name"className='text-neutral-600'>Visibility</label><br />
<div ref={dropdownRef2} className="relative w-full mt-[5px]">
      {/* Dropdown Button */}
      <div
        onClick={() => setIsOpen2(!isOpen2)}
        className="flex items-center justify-between bg-white border border-[#eee] rounded-[5px] px-4 py-2 cursor-pointer hover:border-brand_color"
      >
        <div className="flex items-center gap-2">
          <span
            className={`w-3 h-3 rounded-full ${selectedOptionData2?.bgColor}`}
          ></span>
          <span className={`font-medium ${selectedOptionData2?.color}`}>
            {selectedOption2}
          </span>
        </div>
        <svg
          className={`w-5 h-5 text-gray-500 transition-transform ${
            isOpen2 ? 'rotate-180' : ''
          }`}
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth={2}
            d="M19 9l-7 7-7-7"
          />
        </svg>
      </div>

      {/* Dropdown Menu */}
      {isOpen2 && (
        <ul className="absolute mt-1 w-full bg-white border border-gray-200 rounded-lg shadow-lg z-50 max-h-60 overflow-auto">

          {options2.map((option) => (
            <li
              key={option.label}
              onClick={() => handleSelect2(option)}
              className={`px-4 py-2 flex items-center gap-2 cursor-pointer mt-[5px] 
                ${selectedOption2 === option.label ? `${option.bgColor} text-white` : `${option.color}`}
                hover:${option.bgColor} hover:text-white hover:bg-orange-400`}
            >
              <span
                className={`w-3 h-3 rounded-full ${
                  selectedOption2 === option.label
                    ? 'bg-white'
                    : option.bgColor
                }`}
              ></span>
              {option.label}
            </li>
          ))}
        </ul>
      )}
    </div>
              </div>

            
              // --------------------visibility-----------
                      const [selectedOption2, setSelectedOption2] = useState('Select Visibility');
                      const [isOpen2, setIsOpen2] = useState(false);
                      const dropdownRef2 = useRef(null);
                    
                      const options2 = [
                        { label: 'Select Visibility', color: 'text-gray-400', bgColor: 'bg-gray-300' },
                        { label: 'Publish', color: 'text-green-500', bgColor: 'bg-green-500' },
                        { label: 'Pending', color: 'text-orange-500', bgColor: 'bg-green-500' },
                        { label: 'Draft', color: 'text-red-500', bgColor: 'bg-red-500' },
                      ];
                    
                      // Close dropdown if clicked outside
                      useEffect(() => {
                        const handleClickOutside = (event) => {
                          if (dropdownRef2.current && !dropdownRef2.current.contains(event.target)) {
                            setIsOpen2(false);
                          }
                        };
                        document.addEventListener('mousedown', handleClickOutside);
                        return () => {
                          document.removeEventListener('mousedown', handleClickOutside);
                        };
                      }, []);
                    
                      const handleSelect2 = (option) => {
                        setSelectedOption2(option.label);
                        setIsOpen2(false);
                      };
                        const selectedOptionData2 = options2.find(
                      (option) => option.label === selectedOption2
                    );
                       // -------------authorized list --------------
                      const [selectedOption, setSelectedOption] = useState('Select Authorized');
                      const [isOpen, setIsOpen] = useState(false);
                      const dropdownRef = useRef(null);
                    
                      const options = [
                        { label: 'Select Authorized', color: 'text-gray-400', bgColor: 'bg-gray-300' },
                        { label: 'Approved', color: 'text-green-500', bgColor: 'bg-green-500' },
                        { label: 'Pending', color: 'text-orange-500', bgColor: 'bg-green-500' },
                        { label: 'Rejected', color: 'text-red-500', bgColor: 'bg-red-500' },
                      ];
                    
                      // Close dropdown if clicked outside
                      useEffect(() => {
                        const handleClickOutside = (event) => {
                          if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
                            setIsOpen(false);
                          }
                        };
                        document.addEventListener('mousedown', handleClickOutside);
                        return () => {
                          document.removeEventListener('mousedown', handleClickOutside);
                        };
                      }, []);
                    
                      const handleSelect3 = (option) => {
                        setSelectedOption(option.label);
                        setIsOpen(false);
                      };
                        const selectedOptionData = options.find(
                      (option) => option.label === selectedOption
                    );
                    // --------------------status-----------
                      const [selectedOption3, setSelectedOption3] = useState('Select Status');
                      const [isOpen3, setIsOpen3] = useState(false);
                      const dropdownRef3 = useRef(null);
                    
                      const options3 = [
                        { label: 'Select Status', color: 'text-gray-400', bgColor: 'bg-gray-300' },
                        { label: 'Active', color: 'text-green-500', bgColor: 'bg-green-500' },
                        { label: 'Inactive', color: 'text-red-500', bgColor: 'bg-red-500' },
                      ];
                    
                      // Close dropdown if clicked outside
                      useEffect(() => {
                        const handleClickOutside = (event) => {
                          if (dropdownRef3.current && !dropdownRef3.current.contains(event.target)) {
                            setIsOpen3(false);
                          }
                        };
                        document.addEventListener('mousedown', handleClickOutside);
                        return () => {
                          document.removeEventListener('mousedown', handleClickOutside);
                        };
                      }, []);
                    
                      const handleSelect4 = (option) => {
                        setSelectedOption3(option.label);
                        setIsOpen3(false);
                      };
                        const selectedOptionData3 = options3.find(
                      (option) => option.label === selectedOption3
                    );