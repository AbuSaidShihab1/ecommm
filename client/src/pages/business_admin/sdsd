import React, { useContext, useEffect, useState,useRef } from 'react'
import { NavLink, useNavigate } from 'react-router-dom';
import { Contextapi } from '../../context/Appcontext';
import Dashboardleftside from '../../components/Business_dashboard/Dashboardleftside';
import Dashboradheader from '../../components/Business_dashboard/Dashboardheader';
import { IoIosArrowForward } from "react-icons/io";
import { LuPlus } from "react-icons/lu";
import { CgClose } from "react-icons/cg";
import { FaReplyAll } from "react-icons/fa6";
import { GoEye } from "react-icons/go";
import { MdOutlineMail } from "react-icons/md";
import { MdDeleteOutline } from "react-icons/md";
import { BiImport } from "react-icons/bi";
import { BiExport } from "react-icons/bi";
import { BiFilterAlt } from "react-icons/bi";
import { BsGrid } from "react-icons/bs";
import Select from "react-tailwindcss-select";
import { DateRange } from 'react-date-range';
import 'react-date-range/dist/styles.css'; // Main style file
import 'react-date-range/dist/theme/default.css';
import format from "date-fns/format";
import { addDays } from "date-fns";
const options = [
    { value: "Select Status", label: "Select Status" },
    { value: "Open", label: " Open" },
    { value: "Waiting", label: "Waiting" },
    { value: "Closed", label: "Closed" },
];
const options2 = [
    { value: "Select Category", label: "Select Category" },
    { value: "Food", label: " Food" },
    { value: "Cloth", label: "Cloth" },
    { value: "Shoes", label: "Shoes" }
];
const Bticketlist = () => {
   const navigate=useNavigate();
     const {activesidebar,setactivesidebar,activetopbar,setactivetopbar}=useContext(Contextapi);
         const [animal, setAnimal] = useState(null);
         const [animal2, setAnimal2] = useState(null);

    const handleChange = value => {
        console.log("value:", value);
        setAnimal(value);
    };
      const handleChange2 = value => {
        console.log("value:", value);
        setAnimal2(value);
    };
    function handlesidebar(){
        setactivesidebar(!activesidebar)
    }
        useEffect(()=>{
     window.addEventListener("scroll",()=>{
      if(window.scrollY > 100){
             setactivetopbar(true)
      }else{
             setactivetopbar(false)
      }
     })
   },[]);
  const [range, setRange] = useState([
    {
      startDate: new Date(),
      endDate: new Date(),
      key: "selection",
    },
  ]);
    const [range2, setRange2] = useState([
    {
      startDate: new Date(),
      endDate: new Date(),
      key: "selection",
    },
  ]);
  const [isPickerVisible, setPickerVisible] = useState(false);
  const [isPickerVisible2, setPickerVisible2] = useState(false);

  const inputRef = useRef(null);
  const inputRef2= useRef(null);

  const handleSelect = (ranges) => {
    setRange([ranges.selection]); // Update the range state
  };
  const handleSelect2 = (ranges) => {
    setRange([ranges.selection]); // Update the range state
  };

  // Toggles the visibility of the date range picker
  const togglePicker = () => {
    setPickerVisible(!isPickerVisible);
  };
  const togglePicker2 = () => {
    setPickerVisible2(!isPickerVisible2);
  };
  // Format dates for display in the input field
  const formattedDate = `${format(range[0].startDate, "yyyy-MM-dd")} - ${format(
    range[0].endDate,
    "yyyy-MM-dd"
  )}`;
  const formattedDate2 = `${format(range[0].startDate, "yyyy-MM-dd")} - ${format(
    range[0].endDate,
    "yyyy-MM-dd"
  )}`;
  // Close the picker if clicked outside
  const handleClickOutside = (event) => {
    if (inputRef.current && !inputRef.current.contains(event.target)) {
      setPickerVisible(false);
    }
  };

  React.useEffect(() => {
    document.addEventListener("mousedown", handleClickOutside);
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, []);
    const [value, setValue] = useState({ 
        startDate: null, 
        endDate: null
    });
        const [filter_sidebar,setfilter_sidebar]=useState(false);
        const [filter_sidebar2,setfilter_sidebar2]=useState(false);
       const [gridmenu,setgridmenu]=useState(false);
        const [dateRange, setDateRange] = useState(null);

  const handleChange4 = (range) => {
    console.log('Selected range:', range);
    setDateRange(range);
  };


  // Function to apply the selected date range


  // Function to toggle date picker visibility
  // Handle date selection

  // Function to apply the selected date range and close the picker
  const handleApply = () => {
    const { startDate, endDate } = range[0];
    const formattedStartDate = startDate.toLocaleDateString();
    const formattedEndDate = endDate.toLocaleDateString();
    // setFormattedDate(`${formattedStartDate} - ${formattedEndDate}`);
       setPickerVisible(!isPickerVisible);
       // Close the picker after applying
  };
  const handleApply2 = () => {
    const { startDate, endDate } = range[0];
    const formattedStartDate = startDate.toLocaleDateString();
    const formattedEndDate = endDate.toLocaleDateString();
    // setFormattedDate(`${formattedStartDate} - ${formattedEndDate}`);
       setPickerVisible2(!isPickerVisible2);
       // Close the picker after applying
  };
  const [startDate, setStartDate] = useState(null);
  const [endDate, setEndDate] = useState(null);
  // --------------table coulms
const data = [
  {
    name: "https://isomorphic-furyroad.vercel.app/_next/image?url=https%3A%2F%2Fisomorphic-furyroad.s3.amazonaws.com%2Fpublic%2Favatars%2Favatar-12.webp&w=1920&q=75",
    title:"Your Order Number is 2333",
    nick_name:"Emo",
    message: "Lorem, ipsum dolor sit amet consectetur adipisicing elit. Quibusdam quos harum, aspernatur magni sequi eos.",
    created_date: "20 Jan,2023",
    updated_date: "25 Jan,2024",
    status: "open",
    action: "",
    created_time: "10:15 AM",
    updated_time: "02:30 PM",
  },
  {
    name: "https://isomorphic-furyroad.vercel.app/_next/image?url=https%3A%2F%2Fisomorphic-furyroad.s3.amazonaws.com%2Fpublic%2Favatars%2Favatar-11.webp&w=1920&q=75",
    title:"Your Order Number is 2333",
    nick_name:"Rafi",
    message: "Lorem, ipsum dolor sit amet consectetur adipisicing elit. Quibusdam quos harum, aspernatur magni sequi eos.",
    created_date: "20 Jan,2023",
    updated_date: "25 Jan,2024",
    status: "closed",
    action: "",
    created_time: "08:45 AM",
    updated_time: "04:10 PM",
  },
  {
    name: "https://isomorphic-furyroad.vercel.app/_next/image?url=https%3A%2F%2Fisomorphic-furyroad.s3.amazonaws.com%2Fpublic%2Favatars%2Favatar-10.webp&w=1920&q=75",
    title:"Your Order Number is 2333",
    nick_name:"Rof",
    message: "Lorem, ipsum dolor sit amet consectetur adipisicing elit. Quibusdam quos harum, aspernatur magni sequi eos.",
    created_date: "20 Jan,2023",
    updated_date: "25 Jan,2024",
    status: "open",
    action: "",
    created_time: "09:20 AM",
    updated_time: "01:50 PM",
  },
  {
    name: "https://isomorphic-furyroad.vercel.app/_next/image?url=https%3A%2F%2Fisomorphic-furyroad.s3.amazonaws.com%2Fpublic%2Favatars%2Favatar-07.webp&w=1920&q=75",
    title:"Your Order Number is 2333",
    nick_name:"Mim",
    message: "Lorem, ipsum dolor sit amet consectetur adipisicing elit. Quibusdam quos harum, aspernatur magni sequi eos.",
    created_date: "20 Jan,2023",
    updated_date: "25 Jan,2024",
    status: "waiting",
    action: "",
    created_time: "07:30 AM",
    updated_time: "06:45 PM",
  },
  {
    name: "https://isomorphic-furyroad.vercel.app/_next/image?url=https%3A%2F%2Fisomorphic-furyroad.s3.amazonaws.com%2Fpublic%2Favatars%2Favatar-02.webp&w=1920&q=75",
    title:"Your Order Number is 2333",
    nick_name:"Rof",
    message: "Lorem, ipsum dolor sit amet consectetur adipisicing elit. Quibusdam quos harum, aspernatur magni sequi eos.",
    created_date: "20 Jan,2023",
    updated_date: "25 Jan,2024",
    status: "open",
    action: "",
    created_time: "11:15 AM",
    updated_time: "07:30 PM",
  },
  {
    name: "https://isomorphic-furyroad.vercel.app/_next/image?url=https%3A%2F%2Fisomorphic-furyroad.s3.amazonaws.com%2Fpublic%2Favatars%2Favatar-13.webp&w=1920&q=75",
    title:"Your Order Number is 2333",
    nick_name:"Rof",
    message: "Lorem, ipsum dolor sit amet consectetur adipisicing elit. Quibusdam quos harum, aspernatur magni sequi eos.",
    created_date: "20 Jan,2023",
    updated_date: "25 Jan,2024",
    status: "waiting",
    action: "",
    created_time: "05:50 AM",
    updated_time: "08:20 PM",
  },
];


  const columns = [
    { key: "name", label: "Name" },
    { key: "message", label: "Message" },
    { key: "created_date", label: "Created Date" },
    { key: "updated_date", label: "Updated Date" },
    { key: "status", label: "Status" },
    { key: "action", label: "Action" },
  ];

 const [visibleColumns, setVisibleColumns] = useState(
    columns.map((col) => col.key)
  );

  const minVisibleColumns = 4; // Minimum number of columns that must remain visible

  // Handle column toggle
  const handleColumnToggle = (key) => {
    if (key === "action") return; // Do nothing if trying to uncheck the action column

    setVisibleColumns((prev) => {
      if (prev.includes(key)) {
        // If the column is already visible, uncheck it, but make sure to respect the minimum visible columns
        if (prev.length > minVisibleColumns) {
          return prev.filter((colKey) => colKey !== key);
        }
      } else {
        // If the column is not visible, check it
        return [...prev, key];
      }
      return prev;
    });
  };
  return (
    <section className='w-full h-[100vh] flex font-poppins'>
        <section className={activesidebar ? 'w-0 h-[100vh] transition-all duration-300 overflow-hidden':'w-0 xl:w-[20%] transition-all duration-300 h-[100vh]'}>
            <Dashboardleftside/>
        </section>
        <section className={activesidebar ? 'w-[100%] h-[100vh] overflow-y-auto transition-all duration-300':' transition-all duration-300 w-[100%] overflow-y-auto xl:w-[85%] h-[100vh]'}>
        <Dashboradheader/> 
 <section className='w-[100%] m-auto py-[20px]  xl:py-[40px] px-[20px] lg:px-[30px]'>
     <div className='w-full flex md:justify-between items-center  md:flex-row flex-col justify-start'>
        <div className='w-full md:w-auto'>
              <h1 className='text-[20px] font-[600] mb-[8px]'>Ticket List</h1>
          <ul className='w-full   md:w-auto flex lg:justify-center items-center gap-[10px] text-neutral-500 text-[14px] font-[500]'>
            <li>Dashboard</li>
            <li><IoIosArrowForward/></li>
            <li>Support Ticket</li>
            <li><IoIosArrowForward/></li>
            <li>Ticket List</li>
          </ul>
        </div>
        {/* -------------------table------------------- */}

        {/* ---------------table --------------- */}
      <div className='w-full   md:w-auto flex gap-[10px] md:m-0 mt-[15px]'>
             <button className='w-[50%] md:w-auto px-[15px] py-[10px] text-black text-[14px] gap-[8px]  border-[1px] border-[#eee] flex justify-center items-center rounded-[5px] cursor-pointer'>
                <BiExport className='text-[20px]'/>
                Export
            </button>
            <NavLink to="/business-new-ticket"className="w-[50%] md:w-auto ">
               <button className='px-[12px] w-[100%] md:w-auto py-[10px] font-[500] border-[2px] border-brand_color  text-white rounded-[5px] text-[14px] bg-brand_color flex justify-center items-center gap-[10px]'>
            <LuPlus className='text-[22px]'/>
            Add New
        </button>
            </NavLink>
           </div>

       </div>
       {/* ------------------new customer table----------------- */}
<section className='mt-[2px] lg:mt-[20px] '>
<div className="relative  sm:rounded-lg">
    <div className="flex items-center justify-between mb-[20px] flex-column md:flex-row flex-wrap space-y-4 md:space-y-0 py-4 bg-white dark:bg-gray-900">
  <div className='w-full flex justify-between items-center mb-[20px] '>
       <div className="relative w-[55%] md:w-auto">
      <div className="absolute inset-y-0 rtl:inset-r-0 start-0 flex  items-center ps-3 pointer-events-none">
        <svg className="w-4 h-4 text-gray-500 dark:text-gray-400" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 20">
          <path stroke="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="m19 19-4-4m0-7A7 7 0 1 1 1 8a7 7 0 0 1 14 0Z" />
        </svg>
      </div>
      <input type="text" id="table-search-users" className="block  text-[13px] h-[42px] ps-10 w-full text-sm text-gray-900 border border-gray-300 rounded-lg lg:w-80 outline-brand_color bg-white focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" placeholder="Search for ticket" />
    </div>
   <div className=' w-auto flex justify-center items-center gap-[6px] lg:gap-[10px]'>
    <button onClick={()=>{setfilter_sidebar(true)}}  className='w-[50%] hover:border-brand_color md:w-auto text-[14px] border-[1px] border-[#eee] hover:text-brand_color transition-all duration-100 px-[17px] py-[9px] flex justify-center items-center gap-[7px] rounded-[5px]'>
          <BiFilterAlt className='text-[20px]'/>
    </button>
    <div className="relative w-[50%] md:w-auto inline-block text-left ">
  <div>
    <div className="w-auto  relative inline-block text-left ">
  <div className="w-auto  relative inline-block text-left ">
      <button onClick={()=>{setfilter_sidebar2(!filter_sidebar2)}} className='w-[100%] hover:border-brand_color md:w-auto  text-[14px] border-[1px] hover:text-brand_color transition-all duration-100 border-[#eee] px-[17px] py-[9px] flex justify-center items-center gap-[7px] rounded-[5px]'>
        <BsGrid className='text-[20px]'/>
    </button>
  </div>
  {/* -------------------filter popup------------------ */}
        {/* -------------------filter popup------------------ */}
        <section className={filter_sidebar ?  'fixed top-0 right-0   flex justify-end w-full h-[100%] z-[1099900000]':'fixed top-0 right-[-130%]  flex justify-end w-full h-[100%] z-[1099900000]'}>
              <div className='w-[100%] md:w-[100%] xl:w-[100%] 2xl:w-[100%] bg-[rgba(0,0,0,0.4)] h-[100vh]' onClick={()=>{setfilter_sidebar(false)}}>

           </div>
            <div className={filter_sidebar ? 'w-[80%] md:w-[60%] absolute top-0 right-0  transition-all duration-150 xl:w-[35%] 2xl:w-[25%] h-[100vh] bg-white  overflow-y-auto shadow-2xl no-scrollbar border-l-[1px] border-[#eee]':'w-[80%] md:w-[60%] xl:w-[35%] 2xl:w-[25%] h-[100vh] bg-white absolute top-0 right-[-120%]  transition-all duration-150 overflow-y-auto shadow-2xl no-scrollbar border-l-[1px] border-[#eee]'}>
               <div className='  p-[20px] border-b-[1px] border-[#eee] flex justify-between items-center'>
                <h1 className='text-[16px] md:text-[18px] font-[600] text-black'>Table Filters</h1>
                <button onClick={()=>{setfilter_sidebar(false)}} className='cursor-pointer text-[20px]'><CgClose/></button>
               </div>

<section className="p-[20px] relative w-[100%] ">
    <div className="w-full ">
      <div className=" w-full ">
        <div className="box rounded-xl bg-white w-full ">
          <h6 className="font-medium text-base leading-7 text-black mb-5">Choose Options</h6>
          <div className="flex items-center mb-[10px] gap-1  w-full">
            <div className='w-full'>
                  <div className='mb-[10px]'>
                <label htmlFor="name"className='text-neutral-600'>Name</label><br />
                <input type="text" placeholder='Name'className='px-[10px] mt-[5px] outline-brand_color rounded-[3px] w-full h-[45px] text-[14px] border-[1px] border-[#eee]'/>
              </div>
              <div>

                    <div>
                <label htmlFor="name"className='text-neutral-600'>Created Date</label><br />
   <div ref={inputRef2} className='w-full h-[45px] mt-[6px] outline-none' style={{ position: 'relative' }}>
      {/* Input field */}
      <input
        type="text"
        value={formattedDate2}
        readOnly
        onClick={togglePicker2}
        style={{ padding: '10px', height: '45px', width: '100%', cursor: 'pointer' }}
        className="border-[1px] border-[#eee] outline-brand_color rounded-[5px] text-[14px]"
      />

      {/* Range picker with Apply button */}
      {isPickerVisible2 && (
        <div style={{ position: 'absolute', zIndex: 1000, marginTop: '5px',width:"100%"}} className='border-[1px] border-[#eee] shadow-md pb-[5px]'>
          <DateRange
            ranges={range2}
            onChange={handleSelect2}
            moveRangeOnFirstSelection={false}
            editableDateInputs={true}
            minDate={new Date()}
            maxDate={addDays(new Date(), 365)}
            className='w-full ' // Allow a maximum range of 1 year
          />
          {/* Small Apply Button */}
          <div style={{ textAlign: 'right',paddingRight:"20px" }}>
            <button
              onClick={handleApply2}
              style={{
                padding: '8px 15px',
                backgroundColor: '#F68A1F',
                color: 'white',
                border: 'none',
                borderRadius: '5px',
                cursor: 'pointer',
                fontSize: '14px',
              }}
            >
              Apply
            </button>
          </div>
        </div>
      )}
    </div>
              </div>
              
                    <div className='mt-[10px]'>
                <label htmlFor="name"className='text-neutral-600'>Updated Date</label><br />
   <div ref={inputRef} className='w-full h-[45px] outline-none mt-[6px]' style={{ position: 'relative' }}>
      {/* Input field */}
      <input
        type="text"
        value={formattedDate}
        readOnly
        onClick={togglePicker}
        style={{ padding: '10px', height: '45px', width: '100%', cursor: 'pointer' }}
        className="border-[1px] border-[#eee] outline-brand_color rounded-[5px] text-[14px]"
      />

      {/* Range picker with Apply button */}
      {isPickerVisible && (
        <div style={{ position: 'absolute', zIndex: 1000, marginTop: '5px',width:"100%"}} className='border-[1px] border-[#eee] shadow-md pb-[5px]'>
          <DateRange
            ranges={range}
            onChange={handleSelect}
            moveRangeOnFirstSelection={false}
            editableDateInputs={true}
            minDate={new Date()}
            maxDate={addDays(new Date(), 365)}
            className='w-full ' // Allow a maximum range of 1 year
          />
          {/* Small Apply Button */}
          <div style={{ textAlign: 'right',paddingRight:"20px" }}>
            <button
              onClick={handleApply}
              style={{
                padding: '8px 15px',
                backgroundColor: '#F68A1F',
                color: 'white',
                border: 'none',
                borderRadius: '5px',
                cursor: 'pointer',
                fontSize: '14px',
              }}
            >
              Apply
            </button>
          </div>
        </div>
      )}
    </div>
              </div>
              </div>
            </div>
            
   </div>
        <div  className='mb-[20px]'>
                <label htmlFor="name"className='text-neutral-600'>Status</label><br />
              <Select
            value={animal}
            onChange={handleChange}
            options={options}
              placeholder="Select Status"
            classNames={{
                menuButton: ({ isDisabled }) =>
  `flex text-sm text-gray-500 h-[45px] mt-[5px] border border-gray-300 pt-[3px] rounded shadow-sm transition-all duration-300 focus:outline-none ${
    isDisabled
      ? "bg-gray-200"
      : "bg-white focus:ring focus:ring-[2px] focus:ring-brand_color"
  }`,
          menu: "absolute z-10 w-full bg-white shadow-lg rounded py-1 mt-1.5 text-sm text-gray-700",
                listItem: ({ isSelected }) => (
                    `block transition duration-200 mt-[5px] px-2 py-2 cursor-pointer select-none truncate rounded ${
                        isSelected
                            ? ` bg-brand_color text-white`
                            : `text-gray-500 hover:bg-brand_color hover:opacity-[0.8]  hover:text-white`
                    }`
                )
            }}
        />
              </div>
          <button className="w-full py-2.5 flex h-[45px] md:h-[50px] items-center justify-center gap-2 rounded-[5px] bg-brand_color text-white font-semibold text-[14px] md:text-[16px] shadow-sm shadow-transparent transition-all duration-500 hover:shadow-indigo-200  ">
            Show Results
          </button>
        </div>
  
      </div>
      <div className="col-span-12 md:col-span-9" />
    </div>
</section>

                        


            </div>
        </section>
        {/* ------------column----------------- */}
         <section className={filter_sidebar2 ?  'fixed w-[100%] h-[100vh]  overflow-y-auto shadow-2xl no-scrollbar border-l-[1px] border-[#eee] top-0 right-0 flex justify-end  z-[1099900000]':'fixed top-0 right-[-130%] w-[80%] xl:w-[35%%] 2xl:w-[25%] h-[100vh] flex justify-end  z-[1099900000]'}>
               <div className='w-[100%] md:w-[100%] xl:w-[100%] 2xl:w-[100%] h-[100vh] bg-[rgba(0,0,0,0.4)]' onClick={()=>{setfilter_sidebar2(false)}}>

           </div>
            <div className={filter_sidebar2 ? 'w-[80%] md:w-[60%] absolute top-0 right-0  transition-all duration-150 xl:w-[35%] 2xl:w-[25%] h-[100vh] bg-white  overflow-y-auto shadow-2xl no-scrollbar border-l-[1px] border-[#eee]':'w-[80%] md:w-[60%] xl:w-[35%] 2xl:w-[25%] h-[100vh] bg-white absolute top-0 right-[-120%]  transition-all duration-150 overflow-y-auto shadow-2xl no-scrollbar border-l-[1px] border-[#eee]'}>
               <div className='p-[20px] border-b-[1px] border-[#eee] flex justify-between items-center'>
                <h1 className='text-[18px] font-[600] text-black'>Change Columns</h1>
                <button onClick={()=>{setfilter_sidebar2(false)}} className='cursor-pointer text-[20px]'><CgClose/></button>
               </div>

<section className="p-[20px] relative w-[100%] ">
    <div className="w-full">
      <div className="w-full ">
        <div className="box rounded-xl bg-white w-full ">
          <h6 className="font-medium text-base leading-7 text-black mb-5">Choose Options</h6>
          <div className='w-full flex flex-wrap justify-between flex-1 gap-[15px]'>
        {columns.map((col) => (
            <label key={col.key} htmlFor="checkbox-in-form" 
className="flex p-3 w-full cursor-pointer bg-white border border-gray-300 rounded-md text-sm ">
<input
   checked={visibleColumns.includes(col.key)}
              onChange={() => handleColumnToggle(col.key)}
  type="checkbox"
  className="w-5 h-5 appearance-none cursor-pointer border border-gray-300 rounded-md mr-2 checked:bg-brand_color checked:border-brand_color"
  id="checkbox-checked-in-form"
  defaultChecked
/>   <span className="text-sm font-normal text-gray-600 ml-2">{col.label}</span>

            </label>
         
        ))}
          </div>
  

        </div>
  
      </div>
      <div className="col-span-12 md:col-span-9" />
    </div>
</section>
{/* -------------toogle column--------------- */}
                  

            </div>
            
        </section>
  </div>
   </div>
  </div>
  </div>
  </div>
       {/* -------------------filter popup------------------ */}
        <section className='w-full overflow-x-auto border-[1px] border-[#eee] bg-red-50 mt-[20px] custom-scrollbar'>
  <table className="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
  <thead className="bg-table_header text-left dark:bg-gray-800 text-left uppercase border-b-[1px] border-[#eee]">
    <tr>
      {columns
        .filter((col) => visibleColumns.includes(col.key))
        .map((col) => (
          <th
            key={col.key}
            className="px-6 py-3 text-left text-[14px] font-[500] text-table_title text-nowrap whitespace-nowrap"
          >
            {col.label}
          </th>
        ))}
    </tr>
  </thead>
<tbody className="bg-white divide-y divide-gray-200 dark:bg-gray-900 dark:divide-gray-700">
  {data.map((row, rowIndex) => (
    <tr key={rowIndex}>
      {columns
        .filter((col) => visibleColumns.includes(col.key))
        .map((col) => (
          <td
            key={col.key}
            className={`lg:px-4 py-4 text-sm text-left text-nowrap px-[40px] lg:text-wrap ${
              col.key === "message"
                ? "font-[400] text-brand_color text-[17px] dark:text-gray-100"
                : "text-[17px] text-gray-500 dark:text-gray-300"
            } ${col.key === "name" ? "w-[200px] max-w-[200px] truncate" : ""}`}
          >
            {col.key === "name" ? (
              <div className="flex justify-start items-center gap-[10px] w-[200px] truncate">
                <img
                  src={row[col.key]}
                  alt="Row"
                  className="w-10 h-10 rounded-[5px] flex-shrink-0"
                />
                <h1 className="text-[16px] font-[500] text-black truncate">
                  {row.nick_name}
                </h1>
              </div>
            ) : col.key === "status" ? (
              <div className="flex items-center">
                {row[col.key] === "open" && (
                  <>
                    <div className="h-2.5 w-2.5 rounded-full bg-green-500 me-2" />
                    <span className="text-green-500 font-medium">open</span>
                  </>
                )}
                {row[col.key] === "closed" && (
                  <>
                    <div className="h-2.5 w-2.5 rounded-full bg-red-500 me-2" />
                    <span className="text-red-500 font-medium">closed</span>
                  </>
                )}
                {row[col.key] === "waiting" && (
                  <>
                    <div className="h-2.5 w-2.5 rounded-full bg-yellow-500 me-2" />
                    <span className="text-yellow-500 font-medium">waiting</span>
                  </>
                )}
                {row[col.key] !== "open" &&
                  row[col.key] !== "closed" &&
                  row[col.key] !== "waiting" && <span>{row[col.key]}</span>}
              </div>
            ) : col.key === "message" ? (
              <div>
                {/* Display Title */}
                <h1 className="text-[16px] font-[500] text-black dark:text-gray-100">
                  {row.title}
                </h1>
                {/* Display Message */}
                <p className="text-[14px] text-gray-500 dark:text-gray-300 mt-1">
                  {row.message}
                </p>
              </div>
            ) : col.key === "created_date" ? (
              <div>
                <div className="text-black dark:text-gray-100">
                  {row[col.key]}
                </div>
                <div className="text-[14px] text-gray-400">
                  {row.created_time}
                </div>
              </div>
            ) : col.key === "updated_date" ? (
              <div>
                <div className="text-black dark:text-gray-100">
                  {row[col.key]}
                </div>
                <div className="text-[14px] text-gray-400">
                  {row.updated_time}
                </div>
              </div>
            ) : col.key === "action" ? (
              <div className="flex justify-start items-center gap-[5px]">
                <NavLink to={`/view/${row.id}`}>
                  <div className="w-[50px] h-[40px] border border-gray-300 rounded-[5px] flex justify-center items-center text-[18px] cursor-pointer hover:bg-gray-100 dark:border-gray-700 dark:hover:bg-gray-800">
                    <GoEye />
                  </div>
                </NavLink>
                <NavLink to={`/message/${row.id}`}>
                  <div className="w-[50px] h-[40px] border border-gray-300 rounded-[5px] flex justify-center items-center text-[20px] cursor-pointer hover:bg-gray-100 dark:border-gray-700 dark:hover:bg-gray-800">
                    <MdOutlineMail />
                  </div>
                </NavLink>
                <NavLink to={`/delete/${row.id}`}>
                  <div className="w-[50px] h-[40px] border border-gray-300 rounded-[5px] flex justify-center items-center text-[20px] cursor-pointer hover:bg-gray-100 dark:border-gray-700 dark:hover:bg-gray-800">
                    <MdDeleteOutline />
                  </div>
                </NavLink>
              </div>
            ) : (
              row[col.key]
            )}
          </td>
        ))}
    </tr>
  ))}
</tbody>





</table>

        </section>
     <nav class="flex items-center   flex-column flex-wrap md:flex-row justify-between pt-[12px] md:pt-[10px] lg:pt-4 w-full" aria-label="Table navigation">
<div class="flex items-center space-x-2">
  <label for="rowsPerPage" class="text-sm font-medium text-gray-700">Rows per page:</label>
  <select id="rowsPerPage" class="block  w-15 lg:w-20 px-3 py-2 text-sm border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500">
    <option value="10">10</option>
    <option value="20">20</option>
    <option value="50">50</option>
    <option value="100">100</option>
  </select>
</div>

        <ul class="inline-flex -space-x-px rtl:space-x-reverse text-sm h-8">
            <li>
                <a href="#" class="flex items-center justify-center px-3 h-8 ms-0 leading-tight text-gray-500 bg-white border border-gray-300 rounded-[5px] hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white">Previous</a>
            </li>
            <li>
                <a href="#" class="flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white">1</a>
            </li>
            <li>
        <a href="#" class="flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 rounded-[5px] hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white">Next</a>
            </li>
        </ul>
    </nav>

</div>
</div>

</section>
       {/* ------------------------new customer table-------------------- */}
       </section>
        </section>
    </section>
  )
}

export default Bticketlist